package com.borani.codingpatterns.slidingwindow;import java.util.Arrays;import java.util.List;// Java code for O(n) solution for finding maximum sum of a subarray of size kpublic class MaximumSumArray {    public static void main(String[] args) {        System.out.println(maximumSumOfArray(Arrays.asList(1, 4, 2, 10, 2, 3, 1, 0, 20), 4));    }    public static int maximumSumOfArray(List<Integer> arr, int k) {        // n must be greater        if (arr.size() < k) {            return -1;        }        // Compute sum of first window of size k        int max = Integer.MIN_VALUE;        int windowSum = 0;        for (int i = 0; i < k; i++) {            windowSum += arr.get(i);        }        max = windowSum;        // Compute sums of remaining windows by removing first element of previous window and adding last element of        // current window.        for (int j = k; j < arr.size(); j++) {            windowSum += arr.get(j) - arr.get(j - k);            max = Math.max(max, windowSum);        }        return max;    }}