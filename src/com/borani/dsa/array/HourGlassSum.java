package com.borani.dsa.array;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;//https://www.hackerrank.com/challenges/2d-array/problem?isFullScreen=truepublic class HourGlassSum {    //Time O(n2) and Space O(1)    public static int calculateSum(List<List<Integer>> arr) {        int maxSum = Integer.MIN_VALUE;        for (int i = 0; i < arr.size() - 2; i++) {            for (int j = 0; j < arr.size() - 2; j++) {                int sum = arr.get(i).get(j) + arr.get(i).get(j + 1) + arr.get(i).get(j + 2); //First Row                sum = sum + arr.get(i + 1).get(j + 1);//Second Row                sum = sum + arr.get(i + 2).get(j) + arr.get(i + 2).get(j + 1) + arr.get(i + 2).get(j + 2);//Third Row                maxSum = Math.max(maxSum, sum);            }        }        return maxSum;    }    //Time O(n+m) and Space O(1)    // We will solve this issue later with less time complexity    public static int calculateSumLinearComplexity(List<List<Integer>> arr) {        int maxSum = Integer.MIN_VALUE;        int row = arr.size();        int col = arr.get(0).size();        int sum = 0;        for (int i = 0; i < 3; i++) {            for (int j = 0; j < 3; j++) {                sum += arr.get(i).get(j);            }        }        // Update maxSum with the initial sum        maxSum = Math.max(maxSum, sum);        return maxSum;    }}