import java.io.*;import java.util.*;import java.util.stream.*;import static java.util.stream.Collectors.joining;import static java.util.stream.Collectors.toList;class Result {    /*     * Complete the 'findMaximumAlloyUnits' function below.     *     * The function is expected to return an INTEGER.     * The function accepts following parameters:     *  1. INTEGER_ARRAY composition     *  2. INTEGER_ARRAY stock     *  3. INTEGER_ARRAY cost     *  4. INTEGER budget     */    public static int findMaximumAlloyUnits(List<Integer> composition, List<Integer> stock, List<Integer> cost, int budget) {        // Write your code here        int n = composition.size();        List<Integer> requiredQuantity = new ArrayList<>(n);        List<Integer> extraMetal = new ArrayList<>();        int sum = 0;        int max = 0;        for (int i = 0; i < n; i++) {            sum = 0;            for (int j = 0; j < n; j++) {                int mul = composition.get(j) * (i + 1);                requiredQuantity.add(j,mul);                extraMetal.add(j, (requiredQuantity.get(j) - stock.get(j)));                sum = sum + (extraMetal.get(j) * cost.get(j));            }            if (sum <= budget) {                max = i+1;            }        }        return max;    }}public class Solution {    public static void main(String[] args) throws IOException {        int result = Result.findMaximumAlloyUnits(Arrays.asList(2,1,2), Arrays.asList(1,0,0), Arrays.asList(2,2,1), 14);        System.out.println(result);    }}