package com.borani.functional.supplier;import java.util.function.Supplier;public class SupplierController {    SupplierLogger logger = new SupplierLogger(Boolean.TRUE);    public void execute() {        logger.log(() -> generateLogMessage());    }    private String generateLogMessage() {        /* heavy processing of the logic like DB operation of inter process microservices communication */        return null;    }}class SupplierLogger {    boolean logEnabled = false;    public SupplierLogger(boolean lobEnabled) {        this.logEnabled = lobEnabled;    }    public void log(Supplier<String> messageSupplier) {        //When the logging is enable than we are calling Generate Log Message function        if (isLogEnabled()) {            // Now the generateLogMessage method will only be executed in case the method get of supplier is called.            System.out.println("Hello " + messageSupplier.get());            //Using the supplier, we have the flexibility to implement very complex logic        }    }    private boolean isLogEnabled() {        return logEnabled;    }}